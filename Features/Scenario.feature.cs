// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebpayAPI.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scenarios for Webpay API automation")]
    public partial class ScenariosForWebpayAPIAutomationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Scenario.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Scenarios for Webpay API automation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Access token for business API")]
        [NUnit.Framework.CategoryAttribute("basic")]
        [NUnit.Framework.TestCaseAttribute("identity/connect/token", "84CD6CAA-3773-4101-B6EA-68FD6783D5BD", "2BB80D537B1DA3E38BD30361AA855686BDE0EACD7162FEF6A25FE97BF527A25B", "client_credentials", null)]
        public virtual void AccessTokenForBusinessAPI(string endpoint, string clientid, string clientsecret, string granttype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access token for business API", null, @__tags);
#line 4
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
testRunner.Given(string.Format("I have an {0}", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
testRunner.When(string.Format("I call the post method for {0}, {1} and {2}", clientid, clientsecret, granttype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
testRunner.Then(string.Format("I am able to generate the access token {0}, {1} and {2}", clientid, clientsecret, granttype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Access token for webpay")]
        [NUnit.Framework.CategoryAttribute("basic")]
        [NUnit.Framework.TestCaseAttribute("identity/connect/token", "F80598DB-833B-4BB8-B8FA-DF10DBD959F7", "50F9CDF5-2E36-4B62-8111-17A743CC06B5", "client_credentials", null)]
        public virtual void AccessTokenForWebpay(string endpoint, string clientid, string clientsecret, string granttype, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access token for webpay", null, @__tags);
#line 13
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
testRunner.Given(string.Format("I have an {0}", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
testRunner.When(string.Format("I call the post method for {0}, {1} and {2}", clientid, clientsecret, granttype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
testRunner.Then(string.Format("I am able to generate the access token with parameters {0}, {1}, {2}", clientid, clientsecret, granttype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a webpay payment using Various cards")]
        [NUnit.Framework.CategoryAttribute("basic")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "4111111111111111", "123", "Visa", "01/25", "10", "QP1D1", "18890571956", "Payments/v1.0/casual/webpay", null)]
        [NUnit.Framework.TestCaseAttribute("John Doe", "5431111111111111", "124", "MasterCard", "01/25", "14", "QP1D1", "18890571956", "Payments/v1.0/casual/webpay", null)]
        [NUnit.Framework.TestCaseAttribute("John Doe", "371111111111114", "1234", "AmericanExpress", "01/25", "10", "QP1D1", "18890571956", "Payments/v1.0/casual/webpay", null)]
        public virtual void MakeAWebpayPaymentUsingVariousCards(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a webpay payment using Various cards", null, @__tags);
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 23
testRunner.Given(string.Format("I have some {0} for webpay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
testRunner.When(string.Format("I am authorised to call the post method {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
testRunner.Then(string.Format("I am able to generate a successful response {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7" +
                        "}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CRN Validation")]
        [NUnit.Framework.CategoryAttribute("basic")]
        [NUnit.Framework.TestCaseAttribute("business/v1/businessaccounts?BillerCode=374397&Crn=18890571956", null)]
        public virtual void CRNValidation(string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CRN Validation", null, @__tags);
#line 33
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 34
testRunner.Given(string.Format("I have some {0} for business API", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
testRunner.When("I call the get method for business API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.Then("I am able to generate response with facility name and contract prefix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a casual payment using Various cards")]
        [NUnit.Framework.CategoryAttribute("basic")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "4111111111111111", "123", "Visa", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        [NUnit.Framework.TestCaseAttribute("John Doe", "5431111111111111", "123", "MasterCard", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        [NUnit.Framework.TestCaseAttribute("John Doe", "371111111111114", "1234", "AmericanExpress", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        [NUnit.Framework.TestCaseAttribute("John Doe", "6011111111111117", "1234", "Discover", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        [NUnit.Framework.TestCaseAttribute("John Doe", "3562350000000003", "1234", "JCB", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        public virtual void MakeACasualPaymentUsingVariousCards(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a casual payment using Various cards", null, @__tags);
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 43
testRunner.Given(string.Format("I have some {0} for casual pay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
testRunner.When(string.Format("I call the method for casual payment with parameters {0}, {1}, {2}, {3}, {4}, {5}" +
                        ", {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
testRunner.Then(string.Format("I am able to generate the response for parameters {0}, {1}, {2}, {3}, {4}, {5}, {" +
                        "6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bad Request - 400")]
        [NUnit.Framework.CategoryAttribute("exception")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "11111111111111", "123", "Visa", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        public virtual void BadRequest_400(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "exception"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bad Request - 400", null, @__tags);
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 56
testRunner.Given(string.Format("I have some {0} for casual pay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
testRunner.When(string.Format("I call the method for casual payment with parameters {0}, {1}, {2}, {3}, {4}, {5}" +
                        ", {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
testRunner.Then(string.Format("I am able to generate bad response for parameters {0}, {1}, {2}, {3}, {4}, {5}, {" +
                        "6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unauthorised webpay payment using Visa card - 401")]
        [NUnit.Framework.CategoryAttribute("exception")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "4111111111111111", "123", "Visa", "01/25", "10", "QP1D1", "18890571956", "717079468", "Payments/v1.0/casual/webpay", null)]
        public virtual void UnauthorisedWebpayPaymentUsingVisaCard_401(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string externalpaymentIdentifier, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "exception"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unauthorised webpay payment using Visa card - 401", null, @__tags);
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
testRunner.Given(string.Format("I have some {0} for webpay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
testRunner.When(string.Format("I call the post method for {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber, externalpaymentIdentifier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
testRunner.Then(string.Format("I am able to generate a response for {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber, externalpaymentIdentifier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Forbidden Access - 403")]
        [NUnit.Framework.CategoryAttribute("exception")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "4111111111111111", "123", "Visa", "01/25", "10", "QP1D1", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        public virtual void ForbiddenAccess_403(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "exception"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Forbidden Access - 403", null, @__tags);
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 74
testRunner.Given(string.Format("I have some {0} for casual pay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
testRunner.When(string.Format("I call the method for casual payment with parameters {0}, {1}, {2}, {3}, {4}, {5}" +
                        ", {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
testRunner.Then(string.Format("I am able to generate forbidden response for parameters {0}, {1}, {2}, {3}, {4}, " +
                        "{5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Conflict error casual pay - 409")]
        [NUnit.Framework.CategoryAttribute("exception")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "4111111111111111", "123", "Visa", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        public virtual void ConflictErrorCasualPay_409(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "exception"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conflict error casual pay - 409", null, @__tags);
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 83
testRunner.Given(string.Format("I have some {0} for casual pay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
testRunner.When(string.Format("I call the method for conflict with parameters {0}, {1}, {2}, {3}, {4}, {5}, {6}," +
                        " {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
testRunner.Then(string.Format("I am able to generate the response for conflict with parameters {0}, {1}, {2}, {3" +
                        "}, {4}, {5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unprocessable Entity for Casual payments - 422")]
        [NUnit.Framework.CategoryAttribute("exception")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "36000000000008", "1234", "Diners", "01/25", "10", "DEA2", "18890571956", "Payments/v1.0/casual/creditcard", null)]
        public virtual void UnprocessableEntityForCasualPayments_422(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "exception"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unprocessable Entity for Casual payments - 422", null, @__tags);
#line 91
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 92
testRunner.Given(string.Format("I have some {0} for webpay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
testRunner.When(string.Format("I call the method for unprocessable entity with parameters {0}, {1}, {2}, {3}, {4" +
                        "}, {5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
testRunner.Then(string.Format("I am able to get a response for unprocessable entity with parameters {0}, {1}, {2" +
                        "}, {3}, {4}, {5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Internal server error for Webpay - 500")]
        [NUnit.Framework.CategoryAttribute("exception")]
        [NUnit.Framework.TestCaseAttribute("John Doe", "41111111111111", "123", "Visa", "01/25", "10", "QP1D1", "18890571956", "Payments/v1.0/casual/webpay", null)]
        public virtual void InternalServerErrorForWebpay_500(string cardHolderName, string cardNumber, string cvc, string cardType, string expiryDate, string amount, string businessId, string bpayReferenceNumber, string endpoint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "exception"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Internal server error for Webpay - 500", null, @__tags);
#line 100
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 101
testRunner.Given(string.Format("I have some {0} for casual pay", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
testRunner.When(string.Format("I call the method to generate internal server error for webpay with parameters {0" +
                        "}, {1}, {2}, {3}, {4}, {5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
testRunner.Then(string.Format("I am able to generate internal server error for parameters {0}, {1}, {2}, {3}, {4" +
                        "}, {5}, {6}, {7}", cardHolderName, cardNumber, cvc, cardType, expiryDate, amount, businessId, bpayReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
